// В этом Ката вы реализуете алгоритм Луна , который используется для проверки номеров 
// кредитных карт.

// Дано положительное целое число длиной до 16 цифр, вернуть true, является 
// ли оно действительным номером кредитной карты, и falseесли нет.

// Вот алгоритм:

// Удваивайте каждую вторую цифру, сканируя справа налево , начиная со второй 
// цифры (справа).

// Другой способ представить это так: если число содержит четное количество 
// цифр, удвойте каждую вторую цифру, начиная с первой ; если число содержит 
// нечетное количество цифр, удвойте каждую вторую цифру, начиная со второй :

// 1714 ==> [1*, 7, 1*, 4] ==> [2, 7, 2, 4]

// 12345 ==> [1, 2*, 3, 4*, 5] ==> [1, 4, 3, 8, 5]

// 891 ==> [8, 9*, 1] ==> [8, 18, 1]
// Если полученное число больше 9, замените его суммой его собственных цифр 
// (что равносильно вычитанию 9из него):

// [8, 18*, 1] ==> [8, (1+8), 1] ==> [8, 9, 1]

// or:

// [8, 18*, 1] ==> [8, (18-9), 1] ==> [8, 9, 1]
// Сложите все конечные цифры:

// [8, 9, 1] ==> 8 + 9 + 1 = 18
// Наконец, возьмите эту сумму и разделите ее на 10. Если остаток равен нулю, 
// исходный номер кредитной карты действителен.

// 18 (modulus) 10 ==> 8 , which is not equal to 0, so this is not a valid 
// credit card number

function validate(n){
  let nToArr = n.toString().split('')
  let mapped
  if(nToArr.length % 2){
    mapped = nToArr.map((el,i) =>  i % 2  ? +el + +el : +el )
  }else{
    mapped = nToArr.map((el,i) =>  !(i % 2)  ? +el + +el : +el )
  }
  let resultArr = mapped.map(el => el > 9 ? el - 9 : el)
  return resultArr.reduce((acc,el) => acc + el,0) % 10 === 0
}

console.log(validate(891))
console.log(validate(1))
console.log(validate(2121))
console.log(validate(1230))